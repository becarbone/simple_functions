Dialog.create("Which simple function?");
	options = newArray("Blind","Select Dendrites","Unblind","Split Channels for Thresholding");
	Dialog.addChoice("Options",options);
Dialog.show;
choice = Dialog.getChoice;
if (choice == "Blind") {
	blinding();
}
if (choice == "Select Dendrites") {
	DendriteSelect();
}
if (choice == "Unblind") {
	unblind();
}
if (choice == "Split Channels for Thresholding") {
	SplitChannel();
}

function SplitChannel() {
	waitForUser("Open control condition raw data/dendrites manually");
	print("title	green	red	corrected_g	corrected_r");
	for (i = nImages; i > 0; i--) {
		x=0;
		y=0;
		z=0;
		selectImage(i);
		title = getTitle();
		run("Split Channels");
		close();
		run("In [+]");
		run("In [+]");
		run("In [+]");
		run("Invert");
		setAutoThreshold("Default");
		run("Threshold...");
		waitForUser("set and record threshold");
		getThreshold(z,x);
		z=0;
		selectImage(title+" (green)");
		close();
		run("In [+]");
		run("In [+]");
		run("In [+]");
		run("Invert");
		run("Threshold...");
		waitForUser("set and record threshold");
		getThreshold(z,y);
		print(title+"	"+x+"	"+y+"	"+255-x+"	"+255-y);
		close();
	}
}

function unblind() {
	waitForUser("Separate raw data/dendrites into subfolders\nof approx 20 images or it gets a little hectic\nno images should be open");
	textdir = getDirectory("for the blind");
	unblinddir = getDirectory("for the unblind");
	textlist = getFileList(textdir);
	list = "Blind"+"	unblind";
	Dialog.create("images");
	for(n=0;n<(textlist.length);n++) {
		Dialog.addString(textlist[n],"ImageTitle");
	}
	Dialog.show();
	for(n=0;n<(textlist.length);n++) {
		temp = Dialog.getString();
		list = list + "\n"+ textlist[n]+"	"+ temp;
		open(textdir+textlist[n]);
		rename(temp);
		saveAs("Tiff",unblinddir+temp);
		close();
	}
	print(list);
}

function DendriteSelect() {
	waitForUser("Open images manually");
	imgdir=getDirectory("Choose folder to save raw data/dendrites in");
	ROIdir=getDirectory("Choose folder to save ROI outlines in");
	for (i = nImages; i > 0; i--) {
		selectImage(i);
		run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width=0.1705 pixel_height=0.1705 voxel_depth=1");
		Dialog.create("Are there Usable dendrites?");
			Dialog.addString("","yes or no",30);
			Dialog.show();
		collect = Dialog.getString();
		roiManager("reset");	
		if (collect == "yes") {
			run("In [+]");
			run("In [+]");
			run("In [+]");
			//modify the name
			title=getTitle();
			Dialog.create("Title");
				Dialog.addMessage("Rename");
				Dialog.addString("",title,50);
				Dialog.show();
			newTitle = Dialog.getString();
			rename(newTitle);
			title=getTitle();
			selectWindow(title);
			//select dendrite
			setTool("polygon");
			waitForUser ("Select dendrite then hit OK");
			run("Copy");
			run("Internal Clipboard");
			setTool("polyline");
			waitForUser ("Measure dendrite length");
			run("Clear Results");
			roiManager("Add");
			run("Measure");
			length = getResult("Length",0);
			print(title+ "-1	"+length);	
			setTool("polygon");
			waitForUser ("Select dendrite then hit OK");
			run("Copy");
			run("Internal Clipboard");
			setTool("polyline");
			waitForUser ("Measure dendrite length");
			run("Clear Results");
			roiManager("Add");
			run("Measure");
			length = getResult("Length",0);
			print(title+ "-2	"+length);	
			selectWindow("Clipboard-1");
			saveAs("Tiff", imgdir+title+"-2");
			close();
			selectWindow("Clipboard");
			saveAs("Tiff", imgdir+title+"-1");
			close();
			selectWindow(title);
			close();
			collect = "reset";
			roiManager("save",ROIdir+title+".zip");
		} else {
			close();
			}
	}
}

function blinding() {
	waitForUser("Unblinded images should be in one folder, make\nan empty folder for a blinded copy");
	run("Clear Results");
	row=0;
	unblinddir=getDirectory("select unblinded image folder");
	unblindlist=getFileList(unblinddir);
	blinddir=getDirectory("select blinded image folder");
	blindlist=getFileList(blinddir);
	for(i=0;i<unblindlist.length;i++)
		{
		img = unblindlist[i];
		open(unblinddir+img);
		title = getTitle();
		numbah = random();
		moNumbah = random();
		blind = (numbah^2)/moNumbah;
		run("Set Measurements...", "area perimeter area_fraction limit redirect=None decimal=9");
		setResult("Title",row,title);
		saveAs("Tiff", blinddir+blind);
		blindresult = getTitle();
		setResult("Blind",row,blindresult);
		selectImage(blindresult);
		close();
		row=row+1;
		}
	saveAs("Results", blinddir+"blindkey.csv");
}
